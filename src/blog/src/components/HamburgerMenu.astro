---
import AnimationLink from "./AnimationLink.astro";
import { menuItems } from "../lib/config";

const { title } = Astro.props;
---

<header class="fixed top-0 right-0 z-50 p-4 md:hidden">
  {/* ハンバーガーボタン */}
  <button
    id="menuButton"
    class="relative z-50 p-2 text-gray-500 hover:text-gray-700 focus:outline-none"
    aria-label="メニューを開く"
  >
    <div class="w-6 h-6 relative">
      <span class="hamburger-line top-0"></span>
      <span class="hamburger-line top-2"></span>
      <span class="hamburger-line top-4"></span>
    </div>
  </button>

  {/* オーバーレイ */}
  <div
    id="overlay"
    class="fixed inset-0 bg-black opacity-0 invisible transition-opacity duration-300"
  >
  </div>

  {/* スライドメニュー */}
  <nav
    id="slideMenu"
    class="fixed top-0 right-0 w-48 h-full bg-white shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out"
  >
    <div class="p-6 space-y-4">
      <h2 class="text-md font-bold mb-8">{title}</h2>
      <div class="flex flex-col space-y-4">
        {menuItems.map(item => (
          <AnimationLink text={item.name} href={item.href}/>
        ))}
      </div>
    </div>
  </nav>
</header>

<style>
  .hamburger-line {
    @apply absolute left-0 w-full h-0.5 bg-current transition-all duration-300 ease-in-out;
  }

  /* メニューが開いているときのハンバーガーアイコンのアニメーション */
  .menu-open .hamburger-line:nth-child(1) {
    @apply top-2 rotate-45;
  }
  
  .menu-open .hamburger-line:nth-child(2) {
    @apply opacity-0;
  }
  
  .menu-open .hamburger-line:nth-child(3) {
    @apply top-2 -rotate-45;
  }
</style>

<script>
  const menuButton = document.getElementById('menuButton');
  const slideMenu = document.getElementById('slideMenu');
  const overlay = document.getElementById('overlay');
  let isOpen = false;

  function toggleMenu() {
    isOpen = !isOpen;
    
    // ハンバーガーアイコンのアニメーション
    menuButton?.classList.toggle('menu-open');
    
    // メニューのスライド
    if (isOpen) {
      slideMenu?.classList.remove('translate-x-full');
      overlay?.classList.remove('invisible', 'opacity-0');
      overlay?.classList.add('opacity-50');
      document.body.style.overflow = 'hidden'; // スクロール防止
    } else {
      slideMenu?.classList.add('translate-x-full');
      overlay?.classList.add('invisible', 'opacity-0');
      overlay?.classList.remove('opacity-50');
      document.body.style.overflow = ''; // スクロール再開
    }
  }

  // イベントリスナーの設定
  menuButton?.addEventListener('click', toggleMenu);
  overlay?.addEventListener('click', toggleMenu);

  // 画面サイズが変更されたときにメニューを閉じる
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768 && isOpen) {
      toggleMenu();
    }
  });
</script>